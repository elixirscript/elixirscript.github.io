<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Elixirscript</title>
    <link>https://elixirscript.github.io/index.xml</link>
    <description>Recent content on Elixirscript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Mar 2017 14:27:53 -0600</lastBuildDate>
    <atom:link href="https://elixirscript.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>using with phoenix</title>
      <link>https://elixirscript.github.io/guide/using-with-phoenix/</link>
      <pubDate>Sun, 05 Mar 2017 14:27:53 -0600</pubDate>
      
      <guid>https://elixirscript.github.io/guide/using-with-phoenix/</guid>
      <description>&lt;p&gt;This guide will walk through setting up a Phoenix project with Elixirscript. This guide assumes you have already created a Phoenix project&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This guide covers Phoenix 1.2. It will be updated when Phoenix 1.3 is released&lt;/p&gt;

&lt;p&gt;Update your mix.exs file to add the current version of elixirscript to your dependencies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  defp deps do
    [
      #other deps
     {:elixir_script, &amp;quot;~&amp;gt; x.x.x&amp;quot;}
    ]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Run &lt;code&gt;mix deps.get&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mix deps.get
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, Add the &lt;code&gt;elixir_script&lt;/code&gt; compiler to your list of mix compilers. Also add in the &lt;code&gt;elixir_script&lt;/code&gt; configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def project do
  [app: :my_app,
    version: &amp;quot;0.0.1&amp;quot;,
    elixir: &amp;quot;~&amp;gt; 1.2&amp;quot;,
    elixirc_paths: elixirc_paths(Mix.env),
    compilers: [:phoenix, :gettext, :elixir_script] ++ Mix.compilers,
    build_embedded: Mix.env == :prod,
    start_permanent: Mix.env == :prod,
    deps: deps(),
    elixir_script: [
      input: &amp;quot;web/static/elixirscript&amp;quot;,
      output: &amp;quot;web/static/js/build&amp;quot;
    ]
  ]
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elixirscript by default will looks for input in the &lt;code&gt;lib/elixirscript&lt;/code&gt; directory. It will also by default output to &lt;code&gt;priv/elixirscript&lt;/code&gt;. Update the input directory to &lt;code&gt;web/static/elixirscript&lt;/code&gt;. Update the output directory to &lt;code&gt;web/static/js/build&lt;/code&gt;. This lets it tie into Brunch&amp;rsquo;s pipeline.&lt;/p&gt;

&lt;p&gt;Next, update the watcher configuration to use the Elixirscript watcher:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  watchers: [node: [&amp;quot;node_modules/brunch/bin/brunch&amp;quot;, &amp;quot;watch&amp;quot;, &amp;quot;--stdin&amp;quot;,
                    cd: Path.expand(&amp;quot;../&amp;quot;, __DIR__)], mix: [&amp;quot;elixirscript.watch&amp;quot;]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whenever your Elixirscript code changes, the elixirscript compiler will recompile it.&lt;/p&gt;

&lt;p&gt;Create &lt;code&gt;app.ex&lt;/code&gt; in the &lt;code&gt;web/static/elixirscript&lt;/code&gt; directory&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;touch web/static/elixirscript/app.ex
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For this example, write a simple module that will write &lt;code&gt;Hello, world&lt;/code&gt; to the console on start:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule App do

  def start(_type, _args) do
    :console.log(&amp;quot;Hello, world&amp;quot;)
  end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, update &lt;code&gt;web/static/js/app.js&lt;/code&gt; to start your Elixirscript app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Elixir from &#39;./build/Elixir.App&#39;;
Elixir.start(Elixir.App, [])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The empty array is list of initial arguments for your app.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;mix compile&lt;/code&gt;, you should see a JavaScript file, &lt;code&gt;Elixir.App.js&lt;/code&gt; in your &lt;code&gt;web/static/js/build&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;If you run &lt;code&gt;mix phoenix.server&lt;/code&gt;, open your browser, and then open your console, you should see &lt;code&gt;Hello, world&lt;/code&gt;. Any changes should cause a reload&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>elixirscript 0.26.0 released</title>
      <link>https://elixirscript.github.io/post/elixirscript-0.26.0-released/</link>
      <pubDate>Sat, 25 Feb 2017 16:46:24 -0600</pubDate>
      
      <guid>https://elixirscript.github.io/post/elixirscript-0.26.0-released/</guid>
      <description>

&lt;p&gt;For a full list of changes, check out out the &lt;a href=&#34;https://github.com/elixirscript/elixirscript/blob/master/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This version of Elixirscript has a lot of major changes. Here are some of the changes in the new release:&lt;/p&gt;

&lt;h2 id=&#34;bundled-output&#34;&gt;Bundled output&lt;/h2&gt;

&lt;p&gt;This release is the bundle all output into a single file. Now the only file output will be &lt;code&gt;Elixir.App.js.&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&#34;removed-on-js-load&#34;&gt;Removed &lt;code&gt;@on_js_load&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;@on_js_load&lt;/code&gt; is no more. To start an application, do the following:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//Note: An ES module example. Update for your module output of choice
import Elixir from &amp;quot;./Elixir.App&amp;quot;;

const my_inital_args = [];
Elixir.start(Elixir.MyApp, my_inital_args);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks for a &lt;code&gt;start/2&lt;/code&gt; function in the &lt;code&gt;MyApp&lt;/code&gt; module. It tries to mimick the API of a normal Elixir Application.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;  def start(type, args) do
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;removed-js-import&#34;&gt;Removed &lt;code&gt;JS.import&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;JS.import&lt;/code&gt; is also no more. External JavaScript modules are now defined in configuration. A new configuration, &lt;code&gt;js_modules&lt;/code&gt; is where they go.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;js_modules: [
  {React, &amp;quot;react&amp;quot;},
  {ReactDOM, &amp;quot;react-dom&amp;quot;}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Elixirscript adds both &lt;code&gt;React&lt;/code&gt; and &lt;code&gt;ReactDOM&lt;/code&gt; Â imports to the top of the bundled output. Each item must be 2-tuple or a 3-tuple. The third element is an optional keyword list of options.&lt;/p&gt;

&lt;p&gt;The CLI now has a &lt;code&gt;js-module&lt;/code&gt; to support the above.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;elixirscript input/path -o output/path --js-module React:react --js-module ReactDOM:react-dom&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Elixirscript 0.25.0 released</title>
      <link>https://elixirscript.github.io/post/elixirscript-0.25.0-released/</link>
      <pubDate>Sun, 19 Feb 2017 11:28:48 -0600</pubDate>
      
      <guid>https://elixirscript.github.io/post/elixirscript-0.25.0-released/</guid>
      <description>

&lt;p&gt;0.25.0 adds some big changes. For a full look at what&amp;rsquo;s new, look at the &lt;a href=&#34;https://github.com/elixirscript/elixirscript/blob/master/CHANGELOG.md&#34;&gt;changelog.&lt;/a&gt; Below is a summary of the major changes.&lt;/p&gt;

&lt;h2 id=&#34;select-module-format-of-output&#34;&gt;Select module format of output&lt;/h2&gt;

&lt;p&gt;Beginning with this release, the module format of generated JavaScript is selectable. The choices are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;es - ES Modules (default)&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;common - CommonJS modules&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;umd - UMD modules&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The common options means you can use the output in node without the need for tools like babel. The same for UMD in modern browsers (if you use &lt;a href=&#34;http://requirejs.org/&#34;&gt;requirejs&lt;/a&gt; or add in each file in script tags). JS.import is also updated to generate the correct import code for the specified format.&lt;/p&gt;

&lt;h2 id=&#34;dependencies-support-in-mix-projects&#34;&gt;Dependencies support in mix projects&lt;/h2&gt;

&lt;p&gt;This release also brings support for dependencies in mix projects.&lt;/p&gt;

&lt;p&gt;Your mix project must include the &lt;a href=&#34;https://github.com/elixirscript/elixirscript/blob/master/GettingStarted.md#mix-dependency&#34;&gt;elixirscript compiler in its list of compilers&lt;/a&gt;. Dependencies you use must also have the elixirscript compiler in their mix compilers. When you run &amp;ldquo;mix compile&amp;rdquo;, the compiler will compile the elixirscript code in the paths defined in those dependencies with your code.&lt;/p&gt;

&lt;h2 id=&#34;default-compiler-parameters&#34;&gt;Default compiler parameters&lt;/h2&gt;

&lt;p&gt;The elixirscript mix compiler has the following compiler defaults:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;input: &amp;ldquo;lib/elixirscript&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;output: &amp;ldquo;priv/elixirscript&amp;rdquo;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;format: &amp;ldquo;:es&amp;rdquo;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are changeable by adding the &amp;ldquo;elixir_script&amp;rdquo; settings to your mix project.&lt;/p&gt;

&lt;h2 id=&#34;other-announcements&#34;&gt;Other announcements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Elixirscript now has an &lt;a href=&#34;https://github.com/elixirscript&#34;&gt;organization.&lt;/a&gt; It has all elixirscript-related projects.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Elixirscript now has a &lt;a href=&#34;https://gitter.im/elixirscript/elixirscript&#34;&gt;gitter&lt;/a&gt; room. I am still reachable in the &amp;ldquo;elixirscript&amp;rdquo; slack channel on the elixir-lang slack. The gitter room makes sure that conversation history isn&amp;rsquo;t lost allows for integrations.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>